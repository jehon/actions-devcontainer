#!/usr/bin/env bash

set -o errexit

#
# Documentation:
#  - Default env variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
#  - Pseudo commands:       https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
#

: "${DC_TMP:=tmp/dc}"
: "${PRJ_NAME:=$(basename "$GITHUB_REPOSITORY")}"
: "${IMAGE_NAME:=local}"
: "${CONTAINER_NAME:=devcontainer}"
: "${DOCKER_CONTEXT:=.devcontainer/}"
: "${DOCKER_STARTUP_DELAY:=60}"

CMD="$1"
CMD_ARG="$2"

header_begin() {
    echo "::group::{$1}"
    echo "$1..."
}

header_end() {
    echo "...done"
    echo "::endgroup::"
}

docker_exec() {
    if ! docker_is_running; then
        echo "Container is not running" >&2
        exit 1
    fi
    docker exec "${ARGS[@]}" "$CONTAINER_NAME" "$@"
}

docker_is_running() {
    docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep "$CONTAINER_NAME" >/dev/null
}

ARGS=(
    --env GITHUB_STEP_SUMMARY="$DC_TMP/GITHUB_STEP_SUMMARY.txt"
    --env GITHUB_OUTPUT="$DC_TMP/GITHUB_OUTPUT.txt"
)

if [ -n "$DC_USER" ]; then
    ARGS=("${ARGS[@]}" --user "$DC_USER")
fi

DC_ENV_FILE="$DOCKER_CONTEXT/actions-devcontainer.env"
if [ -r "$DC_ENV_FILE" ]; then
    ARGS=("${ARGS[@]}" --env-file "$DC_ENV_FILE")
fi

if [ -n "$DC_ARG_0" ]; then
    ARGS=("${ARGS[@]}" "$DC_ARG_0")
fi

if [ -n "$DC_ARG_1" ]; then
    ARGS=("${ARGS[@]}" "$DC_ARG_1")
fi

# Needed by stop!
mkdir -p "$DC_TMP"

case "$CMD" in
"dump")
    echo "LEGACY"
    ;;

"start")
    echo "******************************"
    echo "* _0:                     $0"
    echo "* PRJ_NAME:               $PRJ_NAME"
    echo "* CONTAINER_NAME:         $CONTAINER_NAME"
    echo "* IMAGE_NAME:             $IMAGE_NAME"
    echo "* GITHUB_WORKSPACE:       $GITHUB_WORKSPACE"
    echo "* GITHUB_REPOSITORY:      $GITHUB_REPOSITORY"
    echo "* "
    echo "* DC_USER:                $DC_USER"
    echo "* CMD [1]:                $CMD"
    echo "* CMD_ARG [2]:            $CMD_ARG"
    echo "* ARGS:                   ${ARGS[*]}"
    echo "* DC_ARG_0 [env]:         $DC_ARG_0"
    echo "* DC_ARG_1 [env]:         $DC_ARG_1"
    echo "* "
    echo "* DC_TMP:                 $DC_TMP"
    echo "* GITHUB_OUTPUT:          $GITHUB_OUTPUT"
    echo "* GITHUB_STEP_SUMMARY:    $GITHUB_STEP_SUMMARY"
    echo "* "
    echo "******************************"

    header_begin "Set up the environment"
    rm -fr "$DC_TMP"
    mkdir -p "$DC_TMP"
    touch "$DC_TMP"/GITHUB_STEP_SUMMARY.txt
    touch "$DC_TMP"/GITHUB_OUTPUT.txt
    header_end

    header_begin "Building the docker image '$IMAGE_NAME'"
    docker build --quiet -t "$IMAGE_NAME" "$DOCKER_CONTEXT"
    header_end

    header_begin "Starting in the docker '$CONTAINER_NAME' from '$IMAGE_NAME'"
    mkdir -p tmp/
    (
        echo "Starting docker $IMAGE_NAME as $CONTAINER_NAME for project $PRJ_NAME"
        docker run --name "$CONTAINER_NAME" --privileged \
            --volume "$PWD:/workspaces/$PRJ_NAME" \
            --workdir "/workspaces/$PRJ_NAME" \
            "${ARGS[@]}" \
            "$IMAGE_NAME" sleep infinity &
    ) >"$DC_TMP/docker.log" 2>&1
    header_end

    header_begin "Wait for docker to be ready"
    ((I = 1)) # If it was 0, it would fail the script
    ((MAX = "$DOCKER_STARTUP_DELAY"))
    while ! docker_is_running; do
        sleep 1s
        echo -n "."
        ((I++))
        ((I > MAX)) && (
            echo "Waited $I and $CONTAINER_NAME times without success" >&2
            exit 2
        )
    done
    header_end

    header_begin "Dump env"
    docker_exec env >"$DC_TMP/env.log"
    header_end
    ;;

"stop")
    header_begin "Stopping container"
    # blabla/. copy the content of the folder
    #   See https://stackoverflow.com/a/32576340/1954789
    docker container cp "$CONTAINER_NAME:/setup/log/." "$DC_TMP/" || true

    echo "Killing $CONTAINER_NAME"
    docker kill "$CONTAINER_NAME" 2>/dev/null >/dev/null || true

    echo "Removing $CONTAINER_NAME"
    docker rm "$CONTAINER_NAME" 2>/dev/null >/dev/null || true

    # echo "Removing image $IMAGE_NAME"
    # docker image rm "$IMAGE_NAME" 2>/dev/null >/dev/null || true

    if [ -n "$GITHUB_STEP_SUMMARY" ] && [ -r "$DC_TMP"/GITHUB_STEP_SUMMARY.txt ]; then
        echo "Saving summary"
        cat "$DC_TMP"/GITHUB_STEP_SUMMARY.txt >>"$GITHUB_STEP_SUMMARY"
    fi

    if [ -n "$GITHUB_OUTPUT" ] && [ -r "$DC_TMP"/GITHUB_OUTPUT.txt ]; then
        echo "Saving output"
        cat "$DC_TMP"/GITHUB_OUTPUT.txt >>"$GITHUB_OUTPUT"
    fi

    header_end
    ;;

"run")
    docker_exec bash -c "$CMD_ARG" 2>&1
    ;;

*)
    echo "Unknown command: $CMD" >&2
    exit 1
    ;;

esac
