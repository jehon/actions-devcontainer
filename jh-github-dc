#!/usr/bin/env bash

set -o errexit

#
# Documentation:
#  - Default env variables: https://docs.github.com/en/actions/learn-github-actions/environment-variables#default-environment-variables
#  - Pseudo commands:       https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
#

: "${PRJ_NAME:=$(basename "$GITHUB_REPOSITORY")}"
: "${IMAGE_NAME:=local}"
: "${CONTAINER_NAME:=devcontainer}"
: "${DC_USER:=root}"
: "${DOCKER_CONTEXT:=.devcontainer/}"
: "${DOCKER_STARTUP_DELAY:=60}"

DC_TMP="tmp/github/"
DC_LOG="$DC_TMP/docker.log"
DC_BRIDGE="$DC_TMP/bridge"

CMD="$1"
CMD_ARG="$2"

header_begin() {
    echo "::group::{$1}"
    echo "$1..."
}

header_end() {
    echo "...done"
    echo "::endgroup::"
}

ARGS=()
if [ -n "$DC_ARG_0" ]; then
    ARGS=("${ARGS[@]}" "$DC_ARG_0")
fi

if [ -n "$DC_ARG_1" ]; then
    ARGS=("${ARGS[@]}" "$DC_ARG_1")
fi

if [ -n "$DC_ENV_0" ]; then
    ARGS=("${ARGS[@]}" "--env" "$DC_ENV_0")
fi

if [ -n "$DC_ENV_1" ]; then
    ARGS=("${ARGS[@]}" "--env" "$DC_ENV_1")
fi

if [ -n "$DC_ENV_2" ]; then
    ARGS=("${ARGS[@]}" "--env" "$DC_ENV_2")
fi

if [ -n "$DC_ENV_3" ]; then
    ARGS=("${ARGS[@]}" "--env" "$DC_ENV_3")
fi

case "$CMD" in
"dump")
    echo "******************************"
    echo "* _0:                     $0"
    echo "* PRJ_NAME:               $PRJ_NAME"
    echo "* CONTAINER_NAME:         $CONTAINER_NAME"
    echo "* IMAGE_NAME:             $IMAGE_NAME"
    echo "* GITHUB_WORKSPACE:       $GITHUB_WORKSPACE"
    echo "* GITHUB_REPOSITORY:      $GITHUB_REPOSITORY"
    echo "* "
    echo "* DC_USER:                $DC_USER"
    echo "* CMD [1]:                $CMD"
    echo "* CMD_ARG [2]:            $CMD_ARG"
    echo "* ARGS:                   ${ARGS[*]}"
    echo "* DC_ARG_0 [env]:         $DC_ARG_0"
    echo "* DC_ARG_1 [env]:         $DC_ARG_1"
    echo "* DC_ENV_0 [env]:         $DC_ENV_0"
    echo "* DC_ENV_1 [env]:         $DC_ENV_1"
    echo "* DC_ENV_2 [env]:         $DC_ENV_2"
    echo "* DC_ENV_3 [env]:         $DC_ENV_3"
    echo "* "
    echo "* DC_TMP:                 $DC_TMP"
    echo "* DC_LOG:                 $DC_LOG"
    echo "* DC_BRIDGE:              $DC_BRIDGE"
    echo "* GITHUB_STEP_SUMMARY:    $GITHUB_STEP_SUMMARY"
    echo "* "
    echo "******************************"
    ;;

"start")
    header_begin "Set up the environment"
    rm -f "$DC_TMP"
    mkdir -p "$DC_TMP"
    mkdir -p "$DC_BRIDGE"
    touch "$DC_BRIDGE"/GITHUB_STEP_SUMMARY
    header_end

    header_begin "Building the docker image '$IMAGE_NAME'"
    docker build --quiet -t "$IMAGE_NAME" "$DOCKER_CONTEXT"
    header_end

    header_begin "Starting in the docker '$CONTAINER_NAME' from '$IMAGE_NAME'"
    mkdir -p tmp/
    (
        echo "Starting docker $IMAGE_NAME as $CONTAINER_NAME for project $PRJ_NAME"
        docker run --name "$CONTAINER_NAME" --privileged \
            --env CI=1 \
            --volume "$PWD:/workspaces/$PRJ_NAME" \
            --workdir "/workspaces/$PRJ_NAME" \
            "$IMAGE_NAME" sleep infinity &
    ) >"$DC_LOG" 2>&1
    header_end

    header_begin "Wait for docker to be ready"
    ((I = 1)) # If it was 0, it would fail the script
    ((MAX = "$DOCKER_STARTUP_DELAY"))
    while ! docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep "$CONTAINER_NAME" >/dev/null; do
        sleep 1s
        echo -n "."
        ((I++))
        ((I > MAX)) && (
            echo "Waited $I and $CONTAINER_NAME times without success" >&2
            exit 2
        )
    done
    header_end
    ;;

"stop")
    docker kill "$CONTAINER_NAME" 2>/dev/null || true
    docker rm "$CONTAINER_NAME" 2>/dev/null || true
    docker image rm "$IMAGE_NAME" 2>/dev/null || true
    cat "$DC_BRIDGE"/GITHUB_STEP_SUMMARY >>"$GITHUB_STEP_SUMMARY"
    ;;

"make")
    header_begin "Make $CMD"
    docker exec --user "$DC_USER" \
        --env CI=1 \
        --env GITHUB_STEP_SUMMARY="$DC_BRIDGE/GITHUB_STEP_SUMMARY" \
        "${ARGS[@]}" \
        "$CONTAINER_NAME" \
        make --debug "$CMD_ARG"
    header_end
    ;;

*)
    echo "Unknown command: $CMD" >&2
    exit 1
    ;;

esac
